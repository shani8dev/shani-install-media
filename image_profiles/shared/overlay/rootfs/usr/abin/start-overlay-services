#!/bin/bash
#
# Start enabled services from /etc overlay that haven't started this boot
# Run by etc-start-services.service after daemon-reload
#
set -e

# Array to track services to start
declare -a services_to_start=()
declare -a critical_services=()

# Process services from /etc overlay
for service_file in /etc/systemd/system/*.service; do
    [[ -f "$service_file" ]] || continue
    
    service=${service_file##*/}
    
    # Skip templates
    [[ "$service" == *'@.service' ]] && continue
    
    # Check if enabled first (fast early exit)
    systemctl is-enabled -q "$service" 2>/dev/null || continue
    
    # Check if already active or activating
    if systemctl is-active -q "$service" 2>/dev/null; then
        continue
    fi
    
    # Get unit properties in one call
    props=$(systemctl show "$service" \
        -p ActiveState \
        -p SubState \
        -p UnitFileState \
        -p Before \
        --value 2>/dev/null)
    
    IFS=$'\n' read -r -d '' -a prop_array <<< "$props" || true
    active_state="${prop_array[0]:-inactive}"
    sub_state="${prop_array[1]:-dead}"
    unit_file_state="${prop_array[2]:-disabled}"
    before_units="${prop_array[3]:-}"
    
    # Skip if already active/activating
    [[ "$active_state" =~ ^(active|activating|reloading)$ ]] && continue
    
    # Skip failed services (don't auto-retry failures)
    [[ "$sub_state" == "failed" ]] && continue
    
    # Check if this is a critical service that must run before display-manager or graphical.target
    if [[ "$before_units" =~ (display-manager\.service|graphical\.target) ]]; then
        critical_services+=("$service")
    else
        services_to_start+=("$service")
    fi
done

# Start critical services first (synchronously, in order)
for service in "${critical_services[@]}"; do
    echo "Starting critical service: $service"
    systemctl start "$service" || true
done

# Start remaining services in parallel
for service in "${services_to_start[@]}"; do
    echo "Starting service: $service"
    systemctl start "$service" &
done

exit 0
